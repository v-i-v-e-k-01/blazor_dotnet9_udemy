@page "/lifecycle"
@using System.Threading

<PageTitle>Life Cycle</PageTitle>

<h3 class="text-success">Blazor LifeCycle</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@count <button class="btn btn-primary" @onclick="StartCountdown">Start Countdown</button>

<div class="border">
    <_LifeCycleChildComponent CurrentValue="@currentCount"></_LifeCycleChildComponent>
</div>

@foreach(var item in EventType)
{
    <p>@item</p>
    <hr />
}

@code {
    private int currentCount = 0;
    private int count = 5;
    List<string> EventType = new List<string>();
    private void IncrementCount()
    {
        currentCount++;
    }
    

    // OnInitialized() and OnInitializedAsync() lifecycle methods

    protected override async Task OnInitializedAsync()
    {
        // await Task.Delay(500);
        EventType.Add("OnInitializedAsync Called");
    }

    protected override void OnInitialized()
    {
        EventType.Add("OnIntialized Called");
    }




    // OnParameterSet() and OnParameterSetAsync() lifecycle methods

    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet Called");
    }

    protected override async  Task  OnParametersSetAsync()
    {
        // await Task.Delay(500);
        EventType.Add("OnParametersSetAsync Called");
    }



    // OnAfterRender() and OnAfterRenderAsync()  lifecycle methods

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            currentCount = 100;
        }
        else
        {
            currentCount = 200;
        }
        EventType.Add("OnAfterRender is called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // await Task.Delay(500);
        EventType.Add("OnAfterRenderAsync is called");
    }




    // ShoudRender() and StateHasChanged lifecycle methods

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender is called");
        return true;
    }


    void StartCountdown()
    {
        var times = new Timer(TimeCallback, null, 1000, 1000);
    }

    void TimeCallback(object state)
    {
        if(count>0)
        {
            count--;
            InvokeAsync(StateHasChanged);
        }
    }
}

